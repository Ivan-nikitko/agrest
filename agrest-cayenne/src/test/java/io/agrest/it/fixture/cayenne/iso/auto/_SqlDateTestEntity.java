package io.agrest.it.fixture.cayenne.iso.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SqlDateTestEntity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SqlDateTestEntity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Date> DATE = Property.create("date", Date.class);
    public static final Property<Time> TIME = Property.create("time", Time.class);
    public static final Property<Timestamp> TIMESTAMP = Property.create("timestamp", Timestamp.class);

    protected Date date;
    protected Time time;
    protected Timestamp timestamp;


    public void setDate(Date date) {
        beforePropertyWrite("date", this.date, date);
        this.date = date;
    }

    public Date getDate() {
        beforePropertyRead("date");
        return this.date;
    }

    public void setTime(Time time) {
        beforePropertyWrite("time", this.time, time);
        this.time = time;
    }

    public Time getTime() {
        beforePropertyRead("time");
        return this.time;
    }

    public void setTimestamp(Timestamp timestamp) {
        beforePropertyWrite("timestamp", this.timestamp, timestamp);
        this.timestamp = timestamp;
    }

    public Timestamp getTimestamp() {
        beforePropertyRead("timestamp");
        return this.timestamp;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "date":
                return this.date;
            case "time":
                return this.time;
            case "timestamp":
                return this.timestamp;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "date":
                this.date = (Date)val;
                break;
            case "time":
                this.time = (Time)val;
                break;
            case "timestamp":
                this.timestamp = (Timestamp)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.date);
        out.writeObject(this.time);
        out.writeObject(this.timestamp);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.date = (Date)in.readObject();
        this.time = (Time)in.readObject();
        this.timestamp = (Timestamp)in.readObject();
    }

}
