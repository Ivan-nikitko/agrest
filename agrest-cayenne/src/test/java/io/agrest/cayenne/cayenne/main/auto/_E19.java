package io.agrest.cayenne.cayenne.main.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _E19 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _E19 extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<BigDecimal> BIG_DECIMAL = Property.create("bigDecimal", BigDecimal.class);
    public static final Property<BigInteger> BIG_INTEGER = Property.create("bigInteger", BigInteger.class);
    public static final Property<Boolean> BOOLEAN_OBJECT = Property.create("booleanObject", Boolean.class);
    public static final Property<Boolean> BOOLEAN_PRIMITIVE = Property.create("booleanPrimitive", Boolean.class);
    public static final Property<Byte> BYTE_OBJECT = Property.create("byteObject", Byte.class);
    public static final Property<Byte> BYTE_PRIMITIVE = Property.create("bytePrimitive", Byte.class);
    public static final Property<Date> C_DATE = Property.create("cDate", Date.class);
    public static final Property<String> C_STRING = Property.create("cString", String.class);
    public static final Property<Time> C_TIME = Property.create("cTime", Time.class);
    public static final Property<Timestamp> C_TIMESTAMP = Property.create("cTimestamp", Timestamp.class);
    public static final Property<Character> CHAR_OBJECT = Property.create("charObject", Character.class);
    public static final Property<Character> CHAR_PRIMITIVE = Property.create("charPrimitive", Character.class);
    public static final Property<Double> DOUBLE_OBJECT = Property.create("doubleObject", Double.class);
    public static final Property<Double> DOUBLE_PRIMITIVE = Property.create("doublePrimitive", Double.class);
    public static final Property<Float> FLOAT_OBJECT = Property.create("floatObject", Float.class);
    public static final Property<Float> FLOAT_PRIMITIVE = Property.create("floatPrimitive", Float.class);
    public static final Property<byte[]> GUID = Property.create("guid", byte[].class);
    public static final Property<Integer> INT_OBJECT = Property.create("intObject", Integer.class);
    public static final Property<Integer> INT_PRIMITIVE = Property.create("intPrimitive", Integer.class);
    public static final Property<Long> LONG_OBJECT = Property.create("longObject", Long.class);
    public static final Property<Long> LONG_PRIMITIVE = Property.create("longPrimitive", Long.class);
    public static final Property<Short> SHORT_OBJECT = Property.create("shortObject", Short.class);
    public static final Property<Short> SHORT_PRIMITIVE = Property.create("shortPrimitive", Short.class);

    protected BigDecimal bigDecimal;
    protected BigInteger bigInteger;
    protected Boolean booleanObject;
    protected Boolean booleanPrimitive;
    protected Byte byteObject;
    protected Byte bytePrimitive;
    protected Date cDate;
    protected String cString;
    protected Time cTime;
    protected Timestamp cTimestamp;
    protected Character charObject;
    protected Character charPrimitive;
    protected Double doubleObject;
    protected Double doublePrimitive;
    protected Float floatObject;
    protected Float floatPrimitive;
    protected byte[] guid;
    protected Integer intObject;
    protected Integer intPrimitive;
    protected Long longObject;
    protected Long longPrimitive;
    protected Short shortObject;
    protected Short shortPrimitive;


    public void setBigDecimal(BigDecimal bigDecimal) {
        beforePropertyWrite("bigDecimal", this.bigDecimal, bigDecimal);
        this.bigDecimal = bigDecimal;
    }

    public BigDecimal getBigDecimal() {
        beforePropertyRead("bigDecimal");
        return this.bigDecimal;
    }

    public void setBigInteger(BigInteger bigInteger) {
        beforePropertyWrite("bigInteger", this.bigInteger, bigInteger);
        this.bigInteger = bigInteger;
    }

    public BigInteger getBigInteger() {
        beforePropertyRead("bigInteger");
        return this.bigInteger;
    }

    public void setBooleanObject(Boolean booleanObject) {
        beforePropertyWrite("booleanObject", this.booleanObject, booleanObject);
        this.booleanObject = booleanObject;
    }

    public Boolean getBooleanObject() {
        beforePropertyRead("booleanObject");
        return this.booleanObject;
    }

    public void setBooleanPrimitive(boolean booleanPrimitive) {
        beforePropertyWrite("booleanPrimitive", this.booleanPrimitive, booleanPrimitive);
        this.booleanPrimitive = booleanPrimitive;
    }

	public boolean isBooleanPrimitive() {
        beforePropertyRead("booleanPrimitive");
        if(this.booleanPrimitive == null) {
            return false;
        }
        return this.booleanPrimitive;
    }

    public void setByteObject(Byte byteObject) {
        beforePropertyWrite("byteObject", this.byteObject, byteObject);
        this.byteObject = byteObject;
    }

    public Byte getByteObject() {
        beforePropertyRead("byteObject");
        return this.byteObject;
    }

    public void setBytePrimitive(byte bytePrimitive) {
        beforePropertyWrite("bytePrimitive", this.bytePrimitive, bytePrimitive);
        this.bytePrimitive = bytePrimitive;
    }

    public byte getBytePrimitive() {
        beforePropertyRead("bytePrimitive");
        if(this.bytePrimitive == null) {
            return 0;
        }
        return this.bytePrimitive;
    }

    public void setCDate(Date cDate) {
        beforePropertyWrite("cDate", this.cDate, cDate);
        this.cDate = cDate;
    }

    public Date getCDate() {
        beforePropertyRead("cDate");
        return this.cDate;
    }

    public void setCString(String cString) {
        beforePropertyWrite("cString", this.cString, cString);
        this.cString = cString;
    }

    public String getCString() {
        beforePropertyRead("cString");
        return this.cString;
    }

    public void setCTime(Time cTime) {
        beforePropertyWrite("cTime", this.cTime, cTime);
        this.cTime = cTime;
    }

    public Time getCTime() {
        beforePropertyRead("cTime");
        return this.cTime;
    }

    public void setCTimestamp(Timestamp cTimestamp) {
        beforePropertyWrite("cTimestamp", this.cTimestamp, cTimestamp);
        this.cTimestamp = cTimestamp;
    }

    public Timestamp getCTimestamp() {
        beforePropertyRead("cTimestamp");
        return this.cTimestamp;
    }

    public void setCharObject(Character charObject) {
        beforePropertyWrite("charObject", this.charObject, charObject);
        this.charObject = charObject;
    }

    public Character getCharObject() {
        beforePropertyRead("charObject");
        return this.charObject;
    }

    public void setCharPrimitive(char charPrimitive) {
        beforePropertyWrite("charPrimitive", this.charPrimitive, charPrimitive);
        this.charPrimitive = charPrimitive;
    }

    public char getCharPrimitive() {
        beforePropertyRead("charPrimitive");
        if(this.charPrimitive == null) {
            return 0;
        }
        return this.charPrimitive;
    }

    public void setDoubleObject(Double doubleObject) {
        beforePropertyWrite("doubleObject", this.doubleObject, doubleObject);
        this.doubleObject = doubleObject;
    }

    public Double getDoubleObject() {
        beforePropertyRead("doubleObject");
        return this.doubleObject;
    }

    public void setDoublePrimitive(double doublePrimitive) {
        beforePropertyWrite("doublePrimitive", this.doublePrimitive, doublePrimitive);
        this.doublePrimitive = doublePrimitive;
    }

    public double getDoublePrimitive() {
        beforePropertyRead("doublePrimitive");
        if(this.doublePrimitive == null) {
            return 0;
        }
        return this.doublePrimitive;
    }

    public void setFloatObject(Float floatObject) {
        beforePropertyWrite("floatObject", this.floatObject, floatObject);
        this.floatObject = floatObject;
    }

    public Float getFloatObject() {
        beforePropertyRead("floatObject");
        return this.floatObject;
    }

    public void setFloatPrimitive(float floatPrimitive) {
        beforePropertyWrite("floatPrimitive", this.floatPrimitive, floatPrimitive);
        this.floatPrimitive = floatPrimitive;
    }

    public float getFloatPrimitive() {
        beforePropertyRead("floatPrimitive");
        if(this.floatPrimitive == null) {
            return 0;
        }
        return this.floatPrimitive;
    }

    public void setGuid(byte[] guid) {
        beforePropertyWrite("guid", this.guid, guid);
        this.guid = guid;
    }

    public byte[] getGuid() {
        beforePropertyRead("guid");
        return this.guid;
    }

    public void setIntObject(Integer intObject) {
        beforePropertyWrite("intObject", this.intObject, intObject);
        this.intObject = intObject;
    }

    public Integer getIntObject() {
        beforePropertyRead("intObject");
        return this.intObject;
    }

    public void setIntPrimitive(int intPrimitive) {
        beforePropertyWrite("intPrimitive", this.intPrimitive, intPrimitive);
        this.intPrimitive = intPrimitive;
    }

    public int getIntPrimitive() {
        beforePropertyRead("intPrimitive");
        if(this.intPrimitive == null) {
            return 0;
        }
        return this.intPrimitive;
    }

    public void setLongObject(Long longObject) {
        beforePropertyWrite("longObject", this.longObject, longObject);
        this.longObject = longObject;
    }

    public Long getLongObject() {
        beforePropertyRead("longObject");
        return this.longObject;
    }

    public void setLongPrimitive(long longPrimitive) {
        beforePropertyWrite("longPrimitive", this.longPrimitive, longPrimitive);
        this.longPrimitive = longPrimitive;
    }

    public long getLongPrimitive() {
        beforePropertyRead("longPrimitive");
        if(this.longPrimitive == null) {
            return 0;
        }
        return this.longPrimitive;
    }

    public void setShortObject(Short shortObject) {
        beforePropertyWrite("shortObject", this.shortObject, shortObject);
        this.shortObject = shortObject;
    }

    public Short getShortObject() {
        beforePropertyRead("shortObject");
        return this.shortObject;
    }

    public void setShortPrimitive(short shortPrimitive) {
        beforePropertyWrite("shortPrimitive", this.shortPrimitive, shortPrimitive);
        this.shortPrimitive = shortPrimitive;
    }

    public short getShortPrimitive() {
        beforePropertyRead("shortPrimitive");
        if(this.shortPrimitive == null) {
            return 0;
        }
        return this.shortPrimitive;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "bigDecimal":
                return this.bigDecimal;
            case "bigInteger":
                return this.bigInteger;
            case "booleanObject":
                return this.booleanObject;
            case "booleanPrimitive":
                return this.booleanPrimitive;
            case "byteObject":
                return this.byteObject;
            case "bytePrimitive":
                return this.bytePrimitive;
            case "cDate":
                return this.cDate;
            case "cString":
                return this.cString;
            case "cTime":
                return this.cTime;
            case "cTimestamp":
                return this.cTimestamp;
            case "charObject":
                return this.charObject;
            case "charPrimitive":
                return this.charPrimitive;
            case "doubleObject":
                return this.doubleObject;
            case "doublePrimitive":
                return this.doublePrimitive;
            case "floatObject":
                return this.floatObject;
            case "floatPrimitive":
                return this.floatPrimitive;
            case "guid":
                return this.guid;
            case "intObject":
                return this.intObject;
            case "intPrimitive":
                return this.intPrimitive;
            case "longObject":
                return this.longObject;
            case "longPrimitive":
                return this.longPrimitive;
            case "shortObject":
                return this.shortObject;
            case "shortPrimitive":
                return this.shortPrimitive;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "bigDecimal":
                this.bigDecimal = (BigDecimal)val;
                break;
            case "bigInteger":
                this.bigInteger = (BigInteger)val;
                break;
            case "booleanObject":
                this.booleanObject = (Boolean)val;
                break;
            case "booleanPrimitive":
                this.booleanPrimitive = (Boolean)val;
                break;
            case "byteObject":
                this.byteObject = (Byte)val;
                break;
            case "bytePrimitive":
                this.bytePrimitive = (Byte)val;
                break;
            case "cDate":
                this.cDate = (Date)val;
                break;
            case "cString":
                this.cString = (String)val;
                break;
            case "cTime":
                this.cTime = (Time)val;
                break;
            case "cTimestamp":
                this.cTimestamp = (Timestamp)val;
                break;
            case "charObject":
                this.charObject = (Character)val;
                break;
            case "charPrimitive":
                this.charPrimitive = (Character)val;
                break;
            case "doubleObject":
                this.doubleObject = (Double)val;
                break;
            case "doublePrimitive":
                this.doublePrimitive = (Double)val;
                break;
            case "floatObject":
                this.floatObject = (Float)val;
                break;
            case "floatPrimitive":
                this.floatPrimitive = (Float)val;
                break;
            case "guid":
                this.guid = (byte[])val;
                break;
            case "intObject":
                this.intObject = (Integer)val;
                break;
            case "intPrimitive":
                this.intPrimitive = (Integer)val;
                break;
            case "longObject":
                this.longObject = (Long)val;
                break;
            case "longPrimitive":
                this.longPrimitive = (Long)val;
                break;
            case "shortObject":
                this.shortObject = (Short)val;
                break;
            case "shortPrimitive":
                this.shortPrimitive = (Short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.bigDecimal);
        out.writeObject(this.bigInteger);
        out.writeObject(this.booleanObject);
        out.writeObject(this.booleanPrimitive);
        out.writeObject(this.byteObject);
        out.writeObject(this.bytePrimitive);
        out.writeObject(this.cDate);
        out.writeObject(this.cString);
        out.writeObject(this.cTime);
        out.writeObject(this.cTimestamp);
        out.writeObject(this.charObject);
        out.writeObject(this.charPrimitive);
        out.writeObject(this.doubleObject);
        out.writeObject(this.doublePrimitive);
        out.writeObject(this.floatObject);
        out.writeObject(this.floatPrimitive);
        out.writeObject(this.guid);
        out.writeObject(this.intObject);
        out.writeObject(this.intPrimitive);
        out.writeObject(this.longObject);
        out.writeObject(this.longPrimitive);
        out.writeObject(this.shortObject);
        out.writeObject(this.shortPrimitive);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.bigDecimal = (BigDecimal)in.readObject();
        this.bigInteger = (BigInteger)in.readObject();
        this.booleanObject = (Boolean)in.readObject();
        this.booleanPrimitive = (Boolean)in.readObject();
        this.byteObject = (Byte)in.readObject();
        this.bytePrimitive = (Byte)in.readObject();
        this.cDate = (Date)in.readObject();
        this.cString = (String)in.readObject();
        this.cTime = (Time)in.readObject();
        this.cTimestamp = (Timestamp)in.readObject();
        this.charObject = (Character)in.readObject();
        this.charPrimitive = (Character)in.readObject();
        this.doubleObject = (Double)in.readObject();
        this.doublePrimitive = (Double)in.readObject();
        this.floatObject = (Float)in.readObject();
        this.floatPrimitive = (Float)in.readObject();
        this.guid = (byte[])in.readObject();
        this.intObject = (Integer)in.readObject();
        this.intPrimitive = (Integer)in.readObject();
        this.longObject = (Long)in.readObject();
        this.longPrimitive = (Long)in.readObject();
        this.shortObject = (Short)in.readObject();
        this.shortPrimitive = (Short)in.readObject();
    }

}
