package io.agrest.it.fixture.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import io.agrest.it.fixture.cayenne.E11;

/**
 * Class _E10 was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _E10 extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> C_BOOLEAN = Property.create("cBoolean", Boolean.class);
    public static final Property<Date> C_DATE = Property.create("cDate", Date.class);
    public static final Property<BigDecimal> C_DECIMAL = Property.create("cDecimal", BigDecimal.class);
    public static final Property<Integer> C_INT = Property.create("cInt", Integer.class);
    public static final Property<Date> C_TIME = Property.create("cTime", Date.class);
    public static final Property<Date> C_TIMESTAMP = Property.create("cTimestamp", Date.class);
    public static final Property<String> C_VARCHAR = Property.create("cVarchar", String.class);
    public static final Property<E11> E11S = Property.create("e11s", E11.class);

    protected Boolean cBoolean;
    protected Date cDate;
    protected BigDecimal cDecimal;
    protected Integer cInt;
    protected Date cTime;
    protected Date cTimestamp;
    protected String cVarchar;

    protected Object e11s;

    public void setCBoolean(Boolean cBoolean) {
        beforePropertyWrite("cBoolean", this.cBoolean, cBoolean);
        this.cBoolean = cBoolean;
    }

    public Boolean getCBoolean() {
        beforePropertyRead("cBoolean");
        return this.cBoolean;
    }

    public void setCDate(Date cDate) {
        beforePropertyWrite("cDate", this.cDate, cDate);
        this.cDate = cDate;
    }

    public Date getCDate() {
        beforePropertyRead("cDate");
        return this.cDate;
    }

    public void setCDecimal(BigDecimal cDecimal) {
        beforePropertyWrite("cDecimal", this.cDecimal, cDecimal);
        this.cDecimal = cDecimal;
    }

    public BigDecimal getCDecimal() {
        beforePropertyRead("cDecimal");
        return this.cDecimal;
    }

    public void setCInt(Integer cInt) {
        beforePropertyWrite("cInt", this.cInt, cInt);
        this.cInt = cInt;
    }

    public Integer getCInt() {
        beforePropertyRead("cInt");
        return this.cInt;
    }

    public void setCTime(Date cTime) {
        beforePropertyWrite("cTime", this.cTime, cTime);
        this.cTime = cTime;
    }

    public Date getCTime() {
        beforePropertyRead("cTime");
        return this.cTime;
    }

    public void setCTimestamp(Date cTimestamp) {
        beforePropertyWrite("cTimestamp", this.cTimestamp, cTimestamp);
        this.cTimestamp = cTimestamp;
    }

    public Date getCTimestamp() {
        beforePropertyRead("cTimestamp");
        return this.cTimestamp;
    }

    public void setCVarchar(String cVarchar) {
        beforePropertyWrite("cVarchar", this.cVarchar, cVarchar);
        this.cVarchar = cVarchar;
    }

    public String getCVarchar() {
        beforePropertyRead("cVarchar");
        return this.cVarchar;
    }

    public void setE11s(E11 e11s) {
        setToOneTarget("e11s", e11s, true);
    }

    public E11 getE11s() {
        return (E11)readProperty("e11s");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cBoolean":
                return this.cBoolean;
            case "cDate":
                return this.cDate;
            case "cDecimal":
                return this.cDecimal;
            case "cInt":
                return this.cInt;
            case "cTime":
                return this.cTime;
            case "cTimestamp":
                return this.cTimestamp;
            case "cVarchar":
                return this.cVarchar;
            case "e11s":
                return this.e11s;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cBoolean":
                this.cBoolean = (Boolean)val;
                break;
            case "cDate":
                this.cDate = (Date)val;
                break;
            case "cDecimal":
                this.cDecimal = (BigDecimal)val;
                break;
            case "cInt":
                this.cInt = (Integer)val;
                break;
            case "cTime":
                this.cTime = (Date)val;
                break;
            case "cTimestamp":
                this.cTimestamp = (Date)val;
                break;
            case "cVarchar":
                this.cVarchar = (String)val;
                break;
            case "e11s":
                this.e11s = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cBoolean);
        out.writeObject(this.cDate);
        out.writeObject(this.cDecimal);
        out.writeObject(this.cInt);
        out.writeObject(this.cTime);
        out.writeObject(this.cTimestamp);
        out.writeObject(this.cVarchar);
        out.writeObject(this.e11s);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cBoolean = (Boolean)in.readObject();
        this.cDate = (Date)in.readObject();
        this.cDecimal = (BigDecimal)in.readObject();
        this.cInt = (Integer)in.readObject();
        this.cTime = (Date)in.readObject();
        this.cTimestamp = (Date)in.readObject();
        this.cVarchar = (String)in.readObject();
        this.e11s = in.readObject();
    }

}
